[{"C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\index.tsx":"1","C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\components\\NarudzbenicaForma.tsx":"2","C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\components\\NarudzbenicaTabela.tsx":"3","C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\components\\ZahtevTabela.tsx":"4","C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\components\\ZahtevForma.tsx":"5"},{"size":590,"mtime":1612202411289,"results":"6","hashOfConfig":"7"},{"size":11791,"mtime":1612202849087,"results":"8","hashOfConfig":"7"},{"size":1614,"mtime":1612092665167,"results":"9","hashOfConfig":"7"},{"size":1511,"mtime":1612090530846,"results":"10","hashOfConfig":"7"},{"size":4409,"mtime":1612186520019,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"vvgy5a",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\index.tsx",[],["26","27"],"C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\components\\NarudzbenicaForma.tsx",["28","29"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, DropdownItemProps, Form, Grid, Modal, Table } from 'semantic-ui-react'\r\nimport { Narudzbenica, NarudzbenicaDTO, Proizvod, RokIsporuke, StavkaNarudzbenice, Zaposleni } from '../model/tipovi'\r\n\r\ninterface Props {\r\n    open: boolean,\r\n    close: () => void,\r\n    narudzbenica?: Narudzbenica,\r\n    zaposleni: Zaposleni[],\r\n    rokovi: RokIsporuke[],\r\n    proizvodi: Proizvod[],\r\n    onSubmit: (nar: Partial<NarudzbenicaDTO>) => void,\r\n}\r\n\r\nexport default function NarudzbenicaForma(props: Props) {\r\n\r\n    const [zaposleni, setZaposleni] = useState<Zaposleni | undefined>(undefined)\r\n    const [zaposleniGreska, setZaposleniGreska] = useState('')\r\n\r\n    const [proizvod, setProizvod] = useState<Proizvod | undefined>(undefined);\r\n    const [proizvodGreska, setProizvodGreska] = useState('');\r\n\r\n    const [rok, setRok] = useState<RokIsporuke | undefined>(undefined);\r\n    const [rokGreska, setRokGreska] = useState('');\r\n\r\n    const [stavke, setStavke] = useState<StavkaNarudzbenice[]>([]);\r\n    const [selectedStavka, setSelectedStavka] = useState(-1);\r\n\r\n    const [kolicina, setKolicina] = useState(0);\r\n    const [kolicinaGreska, setKolicinaGreska] = useState('')\r\n\r\n    const [opis, setOpis] = useState('');\r\n    const [opisGreska, setOpisGreska] = useState('');\r\n\r\n    const [ukupnoNar, setUkupnoNar] = useState(0);\r\n    const [ukupnoGreska, setUkupnoGreska] = useState('')\r\n\r\n    useEffect(() => {\r\n\r\n        setKolicina(0);\r\n        setKolicinaGreska('');\r\n        setOpis('');\r\n        setOpisGreska('');\r\n        setProizvod(props.proizvodi[0]);\r\n        setProizvodGreska('');\r\n\r\n        setRok(props.narudzbenica?.rok || props.rokovi[0]);\r\n        setRokGreska('')\r\n        setUkupnoNar(props.narudzbenica?.ukupnoNar || 0);\r\n        setUkupnoGreska('');\r\n        setZaposleni(props.narudzbenica?.zaposleni || props.zaposleni[0]);\r\n        setZaposleniGreska('');\r\n        setStavke(props.narudzbenica?.stavke || [])\r\n\r\n    }, [props.narudzbenica])\r\n\r\n    useEffect(() => {\r\n\r\n        if (selectedStavka === -1) {\r\n            setKolicina(0);\r\n            setKolicinaGreska('');\r\n            setOpis('');\r\n            setOpisGreska('');\r\n            setProizvod(props.proizvodi[0]);\r\n            setProizvodGreska('');\r\n        } else {\r\n            const stavka = stavke[selectedStavka];\r\n            setKolicina(stavka.kolicina);\r\n            setKolicinaGreska('');\r\n            setOpis(stavka.opis);\r\n            setOpisGreska('');\r\n            setProizvod(stavka.proizvod);\r\n            setProizvodGreska('');\r\n        }\r\n\r\n    }, [selectedStavka]);\r\n    const sacuvajStavku = () => {\r\n        if (kolicina <= 0) {\r\n            setKolicinaGreska('kolicina mora biti veca od nule');\r\n            return;\r\n        }\r\n        setKolicinaGreska('');\r\n        if (!proizvod) {\r\n            setProizvodGreska('Proizvod je obavezan');\r\n            return;\r\n        }\r\n        setProizvodGreska('');\r\n        if (opis === '') {\r\n            setOpisGreska('Opis je obavezan');\r\n            return;\r\n        }\r\n        setOpisGreska('')\r\n        if (selectedStavka === -1) {\r\n            setStavke(prev => {\r\n                return [...prev, {\r\n                    kolicina: kolicina,\r\n                    opis: opis,\r\n                    narudzbenica: props.narudzbenica,\r\n                    proizvod: proizvod!,\r\n                    statusAkcije: 0,\r\n                    rbNarudzbenice: undefined\r\n                }]\r\n            })\r\n        } else {\r\n            setStavke(prev => {\r\n                return prev.map(element => {\r\n                    if (element !== stavke[selectedStavka]) {\r\n                        return element;\r\n                    }\r\n                    return {\r\n                        ...element,\r\n                        kolicina: kolicina,\r\n                        narudzbenica: props.narudzbenica,\r\n                        opis: opis,\r\n                        proizvod: proizvod!,\r\n\r\n                    }\r\n                })\r\n            })\r\n            setSelectedStavka(-1);\r\n        }\r\n    }\r\n    const obrisiStavku = () => {\r\n        const stavka = stavke[selectedStavka];\r\n        if (stavka.statusAkcije === 0) {\r\n            setStavke(prev => {\r\n                return prev.filter(element => element !== stavka);\r\n            })\r\n            setSelectedStavka(-1);\r\n            return;\r\n        }\r\n        if (stavka.statusAkcije === 1) {\r\n            setStavke(prev => {\r\n                return prev.map(element => {\r\n                    if (element === stavka) {\r\n                        return { ...element, statusAkcije: -1 }\r\n                    }\r\n                    return element;\r\n                })\r\n            })\r\n        }\r\n        setSelectedStavka(-1);\r\n    }\r\n    return (\r\n        <Modal open={props.open} onClose={props.close}>\r\n            <Grid padded>\r\n                <Grid.Row columns='16'>\r\n                    <Grid.Column width='6'>\r\n                        <Form>\r\n                            {props.narudzbenica && <Form.Input readOnly label='Broj narudzbenice' value={props.narudzbenica?.brojNarudzbenice} />}\r\n                            <Form.Input label='Ukupno naruceno' type='number' value={ukupnoNar} error={ukupnoGreska !== '' && ukupnoGreska} onChange={(e) => {\r\n                                const value = e.currentTarget.value;\r\n                                setUkupnoNar(parseFloat(value));;\r\n                            }} />\r\n                            <Form.Dropdown selection value={rok?.rokId} error={rokGreska !== '' && rokGreska} label='Rok' options={\r\n                                props.rokovi.map((element): DropdownItemProps => {\r\n                                    return {\r\n                                        value: element.rokId,\r\n                                        text: element.brojDana,\r\n                                        onClick: () => { setRok(element) }\r\n                                    }\r\n                                })\r\n                            } />\r\n                            <Form.Dropdown selection error={zaposleniGreska !== '' && zaposleniGreska} value={zaposleni?.jmbg} label='Zaposleni' options={\r\n                                props.zaposleni.map((element): DropdownItemProps => {\r\n                                    return {\r\n                                        value: element.jmbg,\r\n                                        text: element.imePrezime,\r\n                                        onClick: () => { setZaposleni(element) }\r\n                                    }\r\n                                })\r\n                            } />\r\n                        </Form>\r\n                    </Grid.Column>\r\n                    <Grid.Column width='4'>\r\n                        <Table selectable>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>Proizvod</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Kolicina</Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {stavke.filter(element => element.statusAkcije !== -1).map((element, index) => {\r\n                                    return <Table.Row active={index === selectedStavka} onClick={() => {\r\n                                        if (index === selectedStavka) {\r\n                                            setSelectedStavka(-1)\r\n                                        } else {\r\n                                            setSelectedStavka(index)\r\n                                        }\r\n                                    }}>\r\n                                        <Table.Cell>{element.proizvod.nazivProizvoda}</Table.Cell>\r\n                                        <Table.Cell>{element.kolicina}</Table.Cell>\r\n                                    </Table.Row>\r\n                                })}\r\n                            </Table.Body>\r\n                        </Table>\r\n                    </Grid.Column>\r\n                    <Grid.Column width='6'>\r\n                        <Form>\r\n                            <Form.Input type='number' label='Kolicina' error={kolicinaGreska !== '' && kolicinaGreska} value={kolicina} onChange={(e) => {\r\n                                const value = e.currentTarget.value;\r\n                                setKolicina(parseFloat(value));\r\n                            }} />\r\n                            <Form.Dropdown selection error={proizvodGreska !== '' && proizvodGreska} value={proizvod?.sifraProizvoda} label='Proizvod' options={\r\n                                props.proizvodi.map((element): DropdownItemProps => {\r\n                                    return {\r\n                                        value: element.sifraProizvoda,\r\n                                        text: element.nazivProizvoda,\r\n                                        onClick: () => { setProizvod(element) }\r\n                                    }\r\n                                })\r\n                            } />\r\n                            <Form.TextArea error={opisGreska !== '' && opisGreska} label='Opis' value={opis} onChange={(e) => {\r\n                                const value = e.currentTarget.value;\r\n                                setOpis(value);\r\n                            }} />\r\n                            <Form.Button primary fluid onClick={sacuvajStavku}>Sacuvaj stavku</Form.Button>\r\n                            {selectedStavka !== -1 && (\r\n                                <Form.Button negative onClick={obrisiStavku} fluid>Obrisi</Form.Button>\r\n                            )}\r\n                        </Form>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button fluid onClick={() => {\r\n                        if (ukupnoNar <= 0) {\r\n                            setUkupnoGreska('Ukupna kolicina mora biti veca od nule');\r\n                            return;\r\n                        }\r\n                        setUkupnoGreska('');\r\n                        if (!rok) {\r\n                            setRokGreska('Rok isporuke je obavezan');\r\n                            return\r\n                        }\r\n                        setRokGreska('');\r\n                        if (!zaposleni) {\r\n                            setZaposleniGreska('Zaposleni je obavezan')\r\n                            return;\r\n                        }\r\n                        setZaposleniGreska('');\r\n                        const narudzbenicaDTO: NarudzbenicaDTO = {\r\n                            brojNarudzbenice: props.narudzbenica?.brojNarudzbenice,\r\n                            rokId: rok.rokId,\r\n                            zaposleniId: zaposleni.jmbg,\r\n                            ukupnoNar: ukupnoNar,\r\n                            stavke: stavke.map(element => {\r\n                                return {\r\n                                    id: element.rbNarudzbenice,\r\n                                    kolicina: element.kolicina,\r\n                                    narudzbenicaId: props.narudzbenica?.brojNarudzbenice,\r\n                                    opisNarudzbenice: element.opis,\r\n                                    proizvodId: element.proizvod.sifraProizvoda,\r\n                                    statusAkcije: element.statusAkcije\r\n                                }\r\n                            })\r\n                        };\r\n\r\n                        props.onSubmit(narudzbenicaDTO);\r\n\r\n                    }}>Sacuvaj narudzbenicu</Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Modal>\r\n    )\r\n}\r\n",["30","31"],"C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\components\\NarudzbenicaTabela.tsx",[],"C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\components\\ZahtevTabela.tsx",[],"C:\\Users\\Kristina\\Desktop\\Projekat FPIS\\kristina klijent\\src\\components\\ZahtevForma.tsx",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":55,"column":8,"nodeType":"40","endLine":55,"endColumn":28,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":76,"column":8,"nodeType":"40","endLine":76,"endColumn":24,"suggestions":"43"},{"ruleId":"34","replacedBy":"44"},{"ruleId":"36","replacedBy":"45"},{"ruleId":"34","replacedBy":"46"},{"ruleId":"36","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.proizvodi', 'props.rokovi', and 'props.zaposleni'. Either include them or remove the dependency array. If 'setProizvod' needs the current value of 'props.proizvodi', you can also switch to useReducer instead of useState and read 'props.proizvodi' in the reducer.","ArrayExpression",["50"],"React Hook useEffect has missing dependencies: 'props.proizvodi' and 'stavke'. Either include them or remove the dependency array. If 'setProizvod' needs the current value of 'props.proizvodi', you can also switch to useReducer instead of useState and read 'props.proizvodi' in the reducer.",["51"],["48"],["49"],["48"],["49"],"no-global-assign","no-unsafe-negation",{"desc":"52","fix":"53"},{"desc":"54","fix":"55"},"Update the dependencies array to be: [props.narudzbenica, props.proizvodi, props.rokovi, props.zaposleni]",{"range":"56","text":"57"},"Update the dependencies array to be: [props.proizvodi, selectedStavka, stavke]",{"range":"58","text":"59"},[2002,2022],"[props.narudzbenica, props.proizvodi, props.rokovi, props.zaposleni]",[2610,2626],"[props.proizvodi, selectedStavka, stavke]"]